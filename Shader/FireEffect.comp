#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D outputImage;

vec2 hash(vec2 p)
{
    p = vec2(dot(p, vec2(127.1f,311.7f)), dot(p, vec2(269.5f,183.3f)));
    return -1.0f + 2.0f * fract(sin(p) * 43758.5453123f);
}

float noise(vec2 p)
{
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor(p + (p.x + p.y) * K1);
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = step(a.yx, a.xy);
    vec2 b = a - o + K2;
	vec2 c = a - 1.0f + 2.0f * K2;
    vec3 h = max(0.5f - vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0f);

	vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0f)), dot(b, hash(i + o)), dot(c, hash(i + 1.0f)));

    return dot(n, vec3(70.0f));
}

float fbm ( in vec2 p ) 
{
    const mat2 m = mat2
    (
        +1.6f, +1.2f, 
        -1.2f, +1.6f
    );

    float f = 0.0;
    f = 0.5000f * noise(p); 
    p = m * p;

    f += 0.2500f * noise(p); 
    p = m*p;

    f += 0.1250f * noise(p); 
    p = m*p;

    f += 0.0625f * noise(p); 
    p = m*p;

    f = 0.5f + 0.5f * f;

    return f;
}

uniform float time;
uniform float normalStrength;
// uniform vec2 fireMovement;
uniform vec2 distortionMovement;
// uniform float distortionStrength;

vec3 bumpMap(vec2 uv, ivec2 size)
{
    vec2 s = vec2(1.0f) / vec2(size);
    float p = fbm(uv);
    float h1 = fbm(uv + s * vec2(1.0f, 0.0f));
    float v1 = fbm(uv + s * vec2(0.0f, 1.0f));

    vec2 xy = (p - vec2(h1, v1)) * normalStrength;

    return vec3(xy + 0.5f, 1.0f);
}


void main()
{
    ivec2 texelCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outputImage);
    vec2 uv = vec2(texelCoords) / vec2(size);

    vec3 normal = bumpMap(uv * vec2(1.0f, 0.3f) + distortionMovement * time, size);
    vec4 colorRGBA = vec4(normal, 1.0f);

    imageStore(outputImage, texelCoords, colorRGBA);
}